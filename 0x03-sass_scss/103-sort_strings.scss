/* Sort! */

// str-compare and swap algorithms created by Hugo Giraudel

// http://thesassway.com/advanced/implementing-bubble-sort-with-sass

$default-sort-order: a b c d e f g h i j k l m n o p q r s t u v w x y z;

@function str-compare($string-a, $string-b, $order: $default-sort-order) {
  // Cast values to strings
  $string-a: to-lower-case($string-a + unquote(""));
  $string-b: to-lower-case($string-b + unquote(""));

  // Loop through and compare the characters of each string...
  @for $i from 1 through min(str-length($string-a), str-length($string-b)) {
    // Extract a character from each string
    $char-a: str-slice($string-a, $i, $i);
    $char-b: str-slice($string-b, $i, $i);

    // If characters exist in $order list and are different
    // return true if first comes before second
    @if $char-a and $char-b and index($order, $char-a) != index($order, $char-b)
    {
      @return index($order, $char-a) < index($order, $char-b);
    }
  }

  // In case they are equal after all characters in one string are compared,
  // return the shortest first
  @return str-length($string-a) < str-length($string-b);
}

@function swap($list, $index-a, $index-b) {
  @if abs($index-a) > length($list) or abs($index-b) > length($list) {
    @return $list;
  }
  $tmp: nth($list, $index-a);
  $list: set-nth($list, $index-a, nth($list, $index-b));
  $list: set-nth($list, $index-b, $tmp);
  @return $list;
}

// Own Implementation of QuickSort ----------------------------------------

@function partition($list, $min, $max) {
  $pivot: nth($list, $max);
  $i: $min;

  @for $j from $min to ($max + 1) {
    @if str-compare(nth($list, $j), $pivot) {
      $list: swap($list, $i, $j);
      $i: ($i + 1);
    }
  }
  $list: swap($list, $i, $max);

  @return $i, $list;
}

@function quicksort($list, $min, $max) {
  @if $min < $max {
    $arr: partition($list, $min, $max);
    $p: nth($arr, 1);
    $list: nth($arr, 2);

    $list: quicksort($list, $min, $p - 1);
    $list: quicksort($list, $p + 1, $max);
  }

  @return $list;
}

@function quicksort_lomuto($list) {
  @if (length($list) - 1) < 2 {
    @return $list;
  }

  $list: quicksort($list, 1, length($list));

  @return $list;
}

@import "103-sort_list.scss";

@debug quicksort_lomuto($list_to_sort);
